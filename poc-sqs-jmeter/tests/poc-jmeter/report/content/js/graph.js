/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18881.0, "minX": 0.0, "maxY": 21780.0, "series": [{"data": [[0.0, 18881.0], [0.1, 18908.0], [0.2, 19011.0], [0.3, 19011.0], [0.4, 19031.0], [0.5, 19058.0], [0.6, 19079.0], [0.7, 19083.0], [0.8, 19100.0], [0.9, 19101.0], [1.0, 19122.0], [1.1, 19122.0], [1.2, 19126.0], [1.3, 19127.0], [1.4, 19127.0], [1.5, 19138.0], [1.6, 19152.0], [1.7, 19167.0], [1.8, 19178.0], [1.9, 19188.0], [2.0, 19197.0], [2.1, 19220.0], [2.2, 19224.0], [2.3, 19230.0], [2.4, 19235.0], [2.5, 19263.0], [2.6, 19273.0], [2.7, 19273.0], [2.8, 19295.0], [2.9, 19297.0], [3.0, 19310.0], [3.1, 19313.0], [3.2, 19351.0], [3.3, 19353.0], [3.4, 19356.0], [3.5, 19374.0], [3.6, 19398.0], [3.7, 19417.0], [3.8, 19418.0], [3.9, 19422.0], [4.0, 19438.0], [4.1, 19459.0], [4.2, 19460.0], [4.3, 19504.0], [4.4, 19520.0], [4.5, 19532.0], [4.6, 19535.0], [4.7, 19544.0], [4.8, 19556.0], [4.9, 19561.0], [5.0, 19563.0], [5.1, 19563.0], [5.2, 19570.0], [5.3, 19572.0], [5.4, 19573.0], [5.5, 19587.0], [5.6, 19592.0], [5.7, 19593.0], [5.8, 19605.0], [5.9, 19607.0], [6.0, 19627.0], [6.1, 19634.0], [6.2, 19637.0], [6.3, 19639.0], [6.4, 19640.0], [6.5, 19641.0], [6.6, 19645.0], [6.7, 19646.0], [6.8, 19647.0], [6.9, 19650.0], [7.0, 19651.0], [7.1, 19655.0], [7.2, 19655.0], [7.3, 19656.0], [7.4, 19662.0], [7.5, 19664.0], [7.6, 19671.0], [7.7, 19681.0], [7.8, 19695.0], [7.9, 19697.0], [8.0, 19705.0], [8.1, 19706.0], [8.2, 19707.0], [8.3, 19709.0], [8.4, 19709.0], [8.5, 19714.0], [8.6, 19715.0], [8.7, 19716.0], [8.8, 19717.0], [8.9, 19721.0], [9.0, 19724.0], [9.1, 19724.0], [9.2, 19726.0], [9.3, 19728.0], [9.4, 19731.0], [9.5, 19736.0], [9.6, 19740.0], [9.7, 19740.0], [9.8, 19742.0], [9.9, 19743.0], [10.0, 19746.0], [10.1, 19746.0], [10.2, 19746.0], [10.3, 19747.0], [10.4, 19747.0], [10.5, 19747.0], [10.6, 19749.0], [10.7, 19750.0], [10.8, 19751.0], [10.9, 19751.0], [11.0, 19751.0], [11.1, 19751.0], [11.2, 19757.0], [11.3, 19758.0], [11.4, 19758.0], [11.5, 19759.0], [11.6, 19762.0], [11.7, 19764.0], [11.8, 19769.0], [11.9, 19770.0], [12.0, 19770.0], [12.1, 19772.0], [12.2, 19772.0], [12.3, 19773.0], [12.4, 19774.0], [12.5, 19776.0], [12.6, 19778.0], [12.7, 19783.0], [12.8, 19784.0], [12.9, 19785.0], [13.0, 19785.0], [13.1, 19786.0], [13.2, 19787.0], [13.3, 19787.0], [13.4, 19788.0], [13.5, 19789.0], [13.6, 19790.0], [13.7, 19791.0], [13.8, 19794.0], [13.9, 19794.0], [14.0, 19795.0], [14.1, 19799.0], [14.2, 19799.0], [14.3, 19800.0], [14.4, 19808.0], [14.5, 19810.0], [14.6, 19816.0], [14.7, 19816.0], [14.8, 19816.0], [14.9, 19819.0], [15.0, 19820.0], [15.1, 19820.0], [15.2, 19821.0], [15.3, 19822.0], [15.4, 19831.0], [15.5, 19832.0], [15.6, 19832.0], [15.7, 19833.0], [15.8, 19836.0], [15.9, 19836.0], [16.0, 19843.0], [16.1, 19849.0], [16.2, 19849.0], [16.3, 19851.0], [16.4, 19860.0], [16.5, 19861.0], [16.6, 19866.0], [16.7, 19868.0], [16.8, 19869.0], [16.9, 19870.0], [17.0, 19871.0], [17.1, 19871.0], [17.2, 19876.0], [17.3, 19878.0], [17.4, 19880.0], [17.5, 19886.0], [17.6, 19886.0], [17.7, 19888.0], [17.8, 19888.0], [17.9, 19891.0], [18.0, 19892.0], [18.1, 19894.0], [18.2, 19898.0], [18.3, 19901.0], [18.4, 19903.0], [18.5, 19906.0], [18.6, 19906.0], [18.7, 19910.0], [18.8, 19913.0], [18.9, 19919.0], [19.0, 19922.0], [19.1, 19935.0], [19.2, 19935.0], [19.3, 19939.0], [19.4, 19941.0], [19.5, 19941.0], [19.6, 19948.0], [19.7, 19951.0], [19.8, 19956.0], [19.9, 19958.0], [20.0, 19967.0], [20.1, 19976.0], [20.2, 19976.0], [20.3, 19980.0], [20.4, 19996.0], [20.5, 20010.0], [20.6, 20014.0], [20.7, 20022.0], [20.8, 20027.0], [20.9, 20039.0], [21.0, 20041.0], [21.1, 20043.0], [21.2, 20058.0], [21.3, 20064.0], [21.4, 20065.0], [21.5, 20077.0], [21.6, 20092.0], [21.7, 20092.0], [21.8, 20100.0], [21.9, 20112.0], [22.0, 20113.0], [22.1, 20126.0], [22.2, 20131.0], [22.3, 20133.0], [22.4, 20135.0], [22.5, 20137.0], [22.6, 20140.0], [22.7, 20142.0], [22.8, 20142.0], [22.9, 20155.0], [23.0, 20158.0], [23.1, 20161.0], [23.2, 20172.0], [23.3, 20184.0], [23.4, 20190.0], [23.5, 20190.0], [23.6, 20200.0], [23.7, 20207.0], [23.8, 20210.0], [23.9, 20213.0], [24.0, 20215.0], [24.1, 20216.0], [24.2, 20219.0], [24.3, 20220.0], [24.4, 20231.0], [24.5, 20232.0], [24.6, 20233.0], [24.7, 20234.0], [24.8, 20238.0], [24.9, 20242.0], [25.0, 20245.0], [25.1, 20245.0], [25.2, 20254.0], [25.3, 20255.0], [25.4, 20255.0], [25.5, 20256.0], [25.6, 20256.0], [25.7, 20257.0], [25.8, 20257.0], [25.9, 20258.0], [26.0, 20258.0], [26.1, 20260.0], [26.2, 20266.0], [26.3, 20269.0], [26.4, 20271.0], [26.5, 20276.0], [26.6, 20276.0], [26.7, 20280.0], [26.8, 20280.0], [26.9, 20281.0], [27.0, 20282.0], [27.1, 20282.0], [27.2, 20283.0], [27.3, 20284.0], [27.4, 20284.0], [27.5, 20287.0], [27.6, 20289.0], [27.7, 20291.0], [27.8, 20292.0], [27.9, 20293.0], [28.0, 20294.0], [28.1, 20294.0], [28.2, 20295.0], [28.3, 20297.0], [28.4, 20301.0], [28.5, 20301.0], [28.6, 20302.0], [28.7, 20302.0], [28.8, 20303.0], [28.9, 20311.0], [29.0, 20312.0], [29.1, 20312.0], [29.2, 20313.0], [29.3, 20315.0], [29.4, 20315.0], [29.5, 20316.0], [29.6, 20321.0], [29.7, 20324.0], [29.8, 20327.0], [29.9, 20328.0], [30.0, 20330.0], [30.1, 20334.0], [30.2, 20335.0], [30.3, 20335.0], [30.4, 20336.0], [30.5, 20336.0], [30.6, 20338.0], [30.7, 20340.0], [30.8, 20342.0], [30.9, 20343.0], [31.0, 20344.0], [31.1, 20344.0], [31.2, 20344.0], [31.3, 20349.0], [31.4, 20353.0], [31.5, 20353.0], [31.6, 20356.0], [31.7, 20356.0], [31.8, 20358.0], [31.9, 20361.0], [32.0, 20362.0], [32.1, 20364.0], [32.2, 20364.0], [32.3, 20365.0], [32.4, 20365.0], [32.5, 20365.0], [32.6, 20366.0], [32.7, 20367.0], [32.8, 20369.0], [32.9, 20374.0], [33.0, 20374.0], [33.1, 20374.0], [33.2, 20374.0], [33.3, 20375.0], [33.4, 20376.0], [33.5, 20377.0], [33.6, 20378.0], [33.7, 20379.0], [33.8, 20381.0], [33.9, 20382.0], [34.0, 20386.0], [34.1, 20386.0], [34.2, 20389.0], [34.3, 20393.0], [34.4, 20394.0], [34.5, 20395.0], [34.6, 20395.0], [34.7, 20397.0], [34.8, 20398.0], [34.9, 20401.0], [35.0, 20404.0], [35.1, 20406.0], [35.2, 20406.0], [35.3, 20408.0], [35.4, 20408.0], [35.5, 20410.0], [35.6, 20411.0], [35.7, 20411.0], [35.8, 20413.0], [35.9, 20414.0], [36.0, 20418.0], [36.1, 20421.0], [36.2, 20422.0], [36.3, 20425.0], [36.4, 20428.0], [36.5, 20430.0], [36.6, 20432.0], [36.7, 20433.0], [36.8, 20434.0], [36.9, 20435.0], [37.0, 20438.0], [37.1, 20439.0], [37.2, 20440.0], [37.3, 20442.0], [37.4, 20443.0], [37.5, 20446.0], [37.6, 20446.0], [37.7, 20447.0], [37.8, 20447.0], [37.9, 20448.0], [38.0, 20448.0], [38.1, 20450.0], [38.2, 20451.0], [38.3, 20452.0], [38.4, 20454.0], [38.5, 20455.0], [38.6, 20458.0], [38.7, 20461.0], [38.8, 20462.0], [38.9, 20464.0], [39.0, 20465.0], [39.1, 20466.0], [39.2, 20467.0], [39.3, 20470.0], [39.4, 20473.0], [39.5, 20474.0], [39.6, 20475.0], [39.7, 20477.0], [39.8, 20477.0], [39.9, 20477.0], [40.0, 20477.0], [40.1, 20479.0], [40.2, 20480.0], [40.3, 20483.0], [40.4, 20483.0], [40.5, 20484.0], [40.6, 20486.0], [40.7, 20486.0], [40.8, 20489.0], [40.9, 20490.0], [41.0, 20490.0], [41.1, 20491.0], [41.2, 20493.0], [41.3, 20494.0], [41.4, 20494.0], [41.5, 20496.0], [41.6, 20496.0], [41.7, 20497.0], [41.8, 20497.0], [41.9, 20498.0], [42.0, 20498.0], [42.1, 20502.0], [42.2, 20503.0], [42.3, 20505.0], [42.4, 20514.0], [42.5, 20514.0], [42.6, 20514.0], [42.7, 20518.0], [42.8, 20520.0], [42.9, 20520.0], [43.0, 20520.0], [43.1, 20521.0], [43.2, 20522.0], [43.3, 20526.0], [43.4, 20527.0], [43.5, 20527.0], [43.6, 20527.0], [43.7, 20528.0], [43.8, 20530.0], [43.9, 20533.0], [44.0, 20534.0], [44.1, 20534.0], [44.2, 20535.0], [44.3, 20535.0], [44.4, 20536.0], [44.5, 20536.0], [44.6, 20536.0], [44.7, 20537.0], [44.8, 20539.0], [44.9, 20542.0], [45.0, 20542.0], [45.1, 20544.0], [45.2, 20546.0], [45.3, 20547.0], [45.4, 20548.0], [45.5, 20549.0], [45.6, 20550.0], [45.7, 20555.0], [45.8, 20555.0], [45.9, 20556.0], [46.0, 20559.0], [46.1, 20561.0], [46.2, 20564.0], [46.3, 20568.0], [46.4, 20571.0], [46.5, 20572.0], [46.6, 20574.0], [46.7, 20574.0], [46.8, 20575.0], [46.9, 20575.0], [47.0, 20576.0], [47.1, 20577.0], [47.2, 20577.0], [47.3, 20577.0], [47.4, 20586.0], [47.5, 20587.0], [47.6, 20588.0], [47.7, 20589.0], [47.8, 20589.0], [47.9, 20592.0], [48.0, 20593.0], [48.1, 20594.0], [48.2, 20595.0], [48.3, 20595.0], [48.4, 20596.0], [48.5, 20597.0], [48.6, 20598.0], [48.7, 20598.0], [48.8, 20601.0], [48.9, 20605.0], [49.0, 20605.0], [49.1, 20605.0], [49.2, 20607.0], [49.3, 20608.0], [49.4, 20608.0], [49.5, 20608.0], [49.6, 20613.0], [49.7, 20615.0], [49.8, 20615.0], [49.9, 20618.0], [50.0, 20618.0], [50.1, 20620.0], [50.2, 20624.0], [50.3, 20624.0], [50.4, 20625.0], [50.5, 20625.0], [50.6, 20626.0], [50.7, 20626.0], [50.8, 20629.0], [50.9, 20632.0], [51.0, 20632.0], [51.1, 20632.0], [51.2, 20634.0], [51.3, 20634.0], [51.4, 20635.0], [51.5, 20639.0], [51.6, 20639.0], [51.7, 20640.0], [51.8, 20642.0], [51.9, 20645.0], [52.0, 20648.0], [52.1, 20648.0], [52.2, 20648.0], [52.3, 20649.0], [52.4, 20654.0], [52.5, 20655.0], [52.6, 20655.0], [52.7, 20656.0], [52.8, 20657.0], [52.9, 20660.0], [53.0, 20660.0], [53.1, 20662.0], [53.2, 20665.0], [53.3, 20665.0], [53.4, 20668.0], [53.5, 20670.0], [53.6, 20671.0], [53.7, 20671.0], [53.8, 20671.0], [53.9, 20671.0], [54.0, 20671.0], [54.1, 20672.0], [54.2, 20673.0], [54.3, 20675.0], [54.4, 20677.0], [54.5, 20681.0], [54.6, 20682.0], [54.7, 20683.0], [54.8, 20685.0], [54.9, 20685.0], [55.0, 20686.0], [55.1, 20687.0], [55.2, 20688.0], [55.3, 20689.0], [55.4, 20689.0], [55.5, 20690.0], [55.6, 20691.0], [55.7, 20691.0], [55.8, 20691.0], [55.9, 20692.0], [56.0, 20693.0], [56.1, 20695.0], [56.2, 20696.0], [56.3, 20698.0], [56.4, 20699.0], [56.5, 20704.0], [56.6, 20705.0], [56.7, 20706.0], [56.8, 20710.0], [56.9, 20711.0], [57.0, 20712.0], [57.1, 20714.0], [57.2, 20720.0], [57.3, 20720.0], [57.4, 20723.0], [57.5, 20724.0], [57.6, 20725.0], [57.7, 20725.0], [57.8, 20725.0], [57.9, 20726.0], [58.0, 20729.0], [58.1, 20730.0], [58.2, 20732.0], [58.3, 20734.0], [58.4, 20738.0], [58.5, 20739.0], [58.6, 20744.0], [58.7, 20745.0], [58.8, 20746.0], [58.9, 20746.0], [59.0, 20749.0], [59.1, 20749.0], [59.2, 20749.0], [59.3, 20751.0], [59.4, 20754.0], [59.5, 20757.0], [59.6, 20760.0], [59.7, 20764.0], [59.8, 20774.0], [59.9, 20777.0], [60.0, 20778.0], [60.1, 20778.0], [60.2, 20780.0], [60.3, 20781.0], [60.4, 20783.0], [60.5, 20783.0], [60.6, 20784.0], [60.7, 20788.0], [60.8, 20788.0], [60.9, 20789.0], [61.0, 20790.0], [61.1, 20793.0], [61.2, 20794.0], [61.3, 20795.0], [61.4, 20801.0], [61.5, 20802.0], [61.6, 20814.0], [61.7, 20817.0], [61.8, 20818.0], [61.9, 20827.0], [62.0, 20838.0], [62.1, 20842.0], [62.2, 20844.0], [62.3, 20850.0], [62.4, 20850.0], [62.5, 20852.0], [62.6, 20858.0], [62.7, 20858.0], [62.8, 20858.0], [62.9, 20865.0], [63.0, 20866.0], [63.1, 20867.0], [63.2, 20871.0], [63.3, 20878.0], [63.4, 20881.0], [63.5, 20882.0], [63.6, 20887.0], [63.7, 20888.0], [63.8, 20889.0], [63.9, 20890.0], [64.0, 20894.0], [64.1, 20901.0], [64.2, 20907.0], [64.3, 20909.0], [64.4, 20909.0], [64.5, 20909.0], [64.6, 20921.0], [64.7, 20923.0], [64.8, 20925.0], [64.9, 20925.0], [65.0, 20925.0], [65.1, 20926.0], [65.2, 20953.0], [65.3, 20960.0], [65.4, 20961.0], [65.5, 20963.0], [65.6, 20967.0], [65.7, 20970.0], [65.8, 20983.0], [65.9, 20991.0], [66.0, 20994.0], [66.1, 21007.0], [66.2, 21008.0], [66.3, 21008.0], [66.4, 21010.0], [66.5, 21011.0], [66.6, 21015.0], [66.7, 21017.0], [66.8, 21024.0], [66.9, 21030.0], [67.0, 21031.0], [67.1, 21032.0], [67.2, 21036.0], [67.3, 21037.0], [67.4, 21040.0], [67.5, 21040.0], [67.6, 21041.0], [67.7, 21050.0], [67.8, 21050.0], [67.9, 21051.0], [68.0, 21052.0], [68.1, 21056.0], [68.2, 21057.0], [68.3, 21059.0], [68.4, 21059.0], [68.5, 21060.0], [68.6, 21060.0], [68.7, 21068.0], [68.8, 21068.0], [68.9, 21069.0], [69.0, 21070.0], [69.1, 21071.0], [69.2, 21073.0], [69.3, 21079.0], [69.4, 21082.0], [69.5, 21096.0], [69.6, 21098.0], [69.7, 21100.0], [69.8, 21100.0], [69.9, 21100.0], [70.0, 21113.0], [70.1, 21113.0], [70.2, 21115.0], [70.3, 21116.0], [70.4, 21119.0], [70.5, 21122.0], [70.6, 21123.0], [70.7, 21123.0], [70.8, 21124.0], [70.9, 21125.0], [71.0, 21126.0], [71.1, 21130.0], [71.2, 21138.0], [71.3, 21139.0], [71.4, 21140.0], [71.5, 21142.0], [71.6, 21142.0], [71.7, 21145.0], [71.8, 21147.0], [71.9, 21147.0], [72.0, 21150.0], [72.1, 21152.0], [72.2, 21153.0], [72.3, 21154.0], [72.4, 21154.0], [72.5, 21154.0], [72.6, 21155.0], [72.7, 21157.0], [72.8, 21158.0], [72.9, 21159.0], [73.0, 21164.0], [73.1, 21165.0], [73.2, 21165.0], [73.3, 21168.0], [73.4, 21168.0], [73.5, 21172.0], [73.6, 21175.0], [73.7, 21177.0], [73.8, 21178.0], [73.9, 21180.0], [74.0, 21182.0], [74.1, 21183.0], [74.2, 21184.0], [74.3, 21185.0], [74.4, 21187.0], [74.5, 21188.0], [74.6, 21189.0], [74.7, 21190.0], [74.8, 21192.0], [74.9, 21193.0], [75.0, 21196.0], [75.1, 21199.0], [75.2, 21199.0], [75.3, 21201.0], [75.4, 21202.0], [75.5, 21203.0], [75.6, 21205.0], [75.7, 21205.0], [75.8, 21206.0], [75.9, 21208.0], [76.0, 21208.0], [76.1, 21208.0], [76.2, 21213.0], [76.3, 21217.0], [76.4, 21217.0], [76.5, 21220.0], [76.6, 21221.0], [76.7, 21221.0], [76.8, 21222.0], [76.9, 21226.0], [77.0, 21231.0], [77.1, 21233.0], [77.2, 21234.0], [77.3, 21238.0], [77.4, 21238.0], [77.5, 21240.0], [77.6, 21245.0], [77.7, 21249.0], [77.8, 21251.0], [77.9, 21251.0], [78.0, 21251.0], [78.1, 21253.0], [78.2, 21256.0], [78.3, 21256.0], [78.4, 21257.0], [78.5, 21259.0], [78.6, 21262.0], [78.7, 21263.0], [78.8, 21263.0], [78.9, 21263.0], [79.0, 21264.0], [79.1, 21267.0], [79.2, 21268.0], [79.3, 21268.0], [79.4, 21269.0], [79.5, 21272.0], [79.6, 21277.0], [79.7, 21277.0], [79.8, 21278.0], [79.9, 21279.0], [80.0, 21280.0], [80.1, 21287.0], [80.2, 21287.0], [80.3, 21291.0], [80.4, 21292.0], [80.5, 21295.0], [80.6, 21296.0], [80.7, 21298.0], [80.8, 21299.0], [80.9, 21299.0], [81.0, 21302.0], [81.1, 21303.0], [81.2, 21307.0], [81.3, 21310.0], [81.4, 21311.0], [81.5, 21313.0], [81.6, 21314.0], [81.7, 21318.0], [81.8, 21322.0], [81.9, 21325.0], [82.0, 21334.0], [82.1, 21334.0], [82.2, 21339.0], [82.3, 21340.0], [82.4, 21340.0], [82.5, 21340.0], [82.6, 21340.0], [82.7, 21342.0], [82.8, 21344.0], [82.9, 21349.0], [83.0, 21352.0], [83.1, 21353.0], [83.2, 21354.0], [83.3, 21366.0], [83.4, 21366.0], [83.5, 21369.0], [83.6, 21373.0], [83.7, 21373.0], [83.8, 21374.0], [83.9, 21374.0], [84.0, 21376.0], [84.1, 21377.0], [84.2, 21378.0], [84.3, 21379.0], [84.4, 21380.0], [84.5, 21383.0], [84.6, 21384.0], [84.7, 21387.0], [84.8, 21390.0], [84.9, 21390.0], [85.0, 21393.0], [85.1, 21406.0], [85.2, 21408.0], [85.3, 21411.0], [85.4, 21411.0], [85.5, 21411.0], [85.6, 21413.0], [85.7, 21414.0], [85.8, 21414.0], [85.9, 21420.0], [86.0, 21422.0], [86.1, 21423.0], [86.2, 21423.0], [86.3, 21433.0], [86.4, 21434.0], [86.5, 21434.0], [86.6, 21434.0], [86.7, 21437.0], [86.8, 21438.0], [86.9, 21438.0], [87.0, 21440.0], [87.1, 21440.0], [87.2, 21440.0], [87.3, 21440.0], [87.4, 21444.0], [87.5, 21446.0], [87.6, 21446.0], [87.7, 21451.0], [87.8, 21454.0], [87.9, 21457.0], [88.0, 21457.0], [88.1, 21457.0], [88.2, 21459.0], [88.3, 21463.0], [88.4, 21469.0], [88.5, 21473.0], [88.6, 21475.0], [88.7, 21476.0], [88.8, 21479.0], [88.9, 21481.0], [89.0, 21485.0], [89.1, 21486.0], [89.2, 21487.0], [89.3, 21487.0], [89.4, 21487.0], [89.5, 21488.0], [89.6, 21492.0], [89.7, 21495.0], [89.8, 21497.0], [89.9, 21501.0], [90.0, 21501.0], [90.1, 21502.0], [90.2, 21504.0], [90.3, 21504.0], [90.4, 21507.0], [90.5, 21507.0], [90.6, 21508.0], [90.7, 21510.0], [90.8, 21510.0], [90.9, 21513.0], [91.0, 21514.0], [91.1, 21514.0], [91.2, 21515.0], [91.3, 21517.0], [91.4, 21518.0], [91.5, 21520.0], [91.6, 21521.0], [91.7, 21523.0], [91.8, 21524.0], [91.9, 21525.0], [92.0, 21527.0], [92.1, 21529.0], [92.2, 21529.0], [92.3, 21532.0], [92.4, 21535.0], [92.5, 21538.0], [92.6, 21540.0], [92.7, 21540.0], [92.8, 21540.0], [92.9, 21542.0], [93.0, 21548.0], [93.1, 21549.0], [93.2, 21550.0], [93.3, 21556.0], [93.4, 21562.0], [93.5, 21565.0], [93.6, 21566.0], [93.7, 21568.0], [93.8, 21569.0], [93.9, 21573.0], [94.0, 21580.0], [94.1, 21581.0], [94.2, 21582.0], [94.3, 21582.0], [94.4, 21585.0], [94.5, 21586.0], [94.6, 21589.0], [94.7, 21590.0], [94.8, 21592.0], [94.9, 21593.0], [95.0, 21598.0], [95.1, 21600.0], [95.2, 21602.0], [95.3, 21607.0], [95.4, 21608.0], [95.5, 21609.0], [95.6, 21614.0], [95.7, 21614.0], [95.8, 21618.0], [95.9, 21619.0], [96.0, 21629.0], [96.1, 21636.0], [96.2, 21639.0], [96.3, 21650.0], [96.4, 21654.0], [96.5, 21656.0], [96.6, 21658.0], [96.7, 21660.0], [96.8, 21661.0], [96.9, 21665.0], [97.0, 21666.0], [97.1, 21669.0], [97.2, 21672.0], [97.3, 21674.0], [97.4, 21675.0], [97.5, 21675.0], [97.6, 21676.0], [97.7, 21676.0], [97.8, 21676.0], [97.9, 21678.0], [98.0, 21678.0], [98.1, 21684.0], [98.2, 21687.0], [98.3, 21693.0], [98.4, 21694.0], [98.5, 21695.0], [98.6, 21697.0], [98.7, 21702.0], [98.8, 21705.0], [98.9, 21708.0], [99.0, 21711.0], [99.1, 21714.0], [99.2, 21719.0], [99.3, 21723.0], [99.4, 21726.0], [99.5, 21727.0], [99.6, 21735.0], [99.7, 21761.0], [99.8, 21767.0], [99.9, 21780.0]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 18800.0, "maxY": 77.0, "series": [{"data": [[19000.0, 6.0], [18900.0, 1.0], [19100.0, 12.0], [19400.0, 6.0], [18800.0, 1.0], [19200.0, 9.0], [19300.0, 7.0], [19600.0, 22.0], [19700.0, 63.0], [19500.0, 16.0], [19900.0, 21.0], [20000.0, 13.0], [19800.0, 40.0], [20100.0, 18.0], [20200.0, 48.0], [20300.0, 65.0], [20400.0, 72.0], [21300.0, 41.0], [20600.0, 77.0], [20500.0, 67.0], [20700.0, 49.0], [20800.0, 27.0], [20900.0, 20.0], [21100.0, 56.0], [21200.0, 58.0], [21000.0, 36.0], [21400.0, 48.0], [21500.0, 52.0], [21600.0, 36.0], [21700.0, 13.0]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 631.4290000000004, "minX": 1.60710552E12, "maxY": 631.4290000000004, "series": [{"data": [[1.60710552E12, 631.4290000000004]], "isOverall": false, "label": "Scenario 1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60710552E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18881.0, "minX": 352.0, "maxY": 21780.0, "series": [{"data": [[366.0, 21105.0], [367.0, 20858.0], [364.0, 21504.0], [352.0, 21292.0], [362.0, 21678.0], [361.0, 21780.0], [360.0, 21020.5], [359.0, 21423.0], [358.0, 20720.0], [357.0, 21237.0], [383.0, 21727.0], [380.0, 21552.0], [375.0, 21719.0], [372.0, 21735.0], [369.0, 20865.0], [396.0, 21366.0], [395.0, 21256.0], [394.0, 21051.0], [392.0, 21423.0], [391.0, 21111.333333333332], [385.0, 21457.0], [389.0, 21145.0], [388.0, 21636.0], [387.0, 20959.333333333332], [386.0, 21495.0], [447.0, 21031.505617977535], [446.0, 21110.666666666668], [445.0, 21149.633928571428], [444.0, 21265.375], [443.0, 21711.0], [442.0, 20726.0], [441.0, 21245.26923076923], [440.0, 21174.655172413797], [462.0, 21457.0], [463.0, 21353.0], [461.0, 20859.0], [460.0, 21374.0], [459.0, 21152.0], [458.0, 20452.0], [457.0, 21340.0], [456.0, 21159.0], [455.0, 20888.0], [451.0, 21021.45454545454], [454.0, 20945.0], [453.0, 20958.363636363636], [478.0, 21344.0], [479.0, 21164.0], [477.0, 21217.0], [476.0, 21438.0], [475.0, 21510.0], [474.0, 20925.0], [472.0, 20448.0], [471.0, 20480.0], [467.0, 20996.0], [466.0, 21142.0], [465.0, 21138.0], [464.0, 20890.0], [468.0, 20963.0], [483.0, 20923.0], [494.0, 21154.5], [495.0, 20462.5], [492.0, 21007.5], [491.0, 20760.0], [489.0, 21157.0], [487.0, 21368.0], [485.0, 20435.0], [482.0, 20374.0], [481.0, 21366.0], [480.0, 21024.0], [509.0, 20852.666666666668], [511.0, 20396.5], [508.0, 21437.0], [499.0, 20820.5], [497.0, 21209.0], [496.0, 20512.0], [507.0, 20471.5], [506.0, 21264.0], [505.0, 20484.0], [504.0, 20897.083333333332], [503.0, 21295.0], [502.0, 20365.0], [501.0, 21168.0], [500.0, 20967.0], [518.0, 21380.0], [541.0, 21142.0], [538.0, 20316.0], [534.0, 20439.0], [530.0, 20408.0], [527.0, 20410.0], [522.0, 21257.0], [516.0, 21108.0], [514.0, 21092.5], [513.0, 20502.0], [572.0, 21123.0], [568.0, 21119.0], [564.0, 20784.0], [563.0, 20312.0], [562.0, 21102.0], [560.0, 20358.0], [558.0, 20498.0], [557.0, 21299.0], [551.0, 21207.0], [550.0, 20430.0], [544.0, 21154.0], [603.0, 21208.0], [604.0, 21135.5], [601.0, 20657.5], [582.0, 20789.5], [581.0, 20366.0], [578.0, 21177.0], [577.0, 20498.0], [597.0, 20364.0], [595.0, 20454.0], [593.0, 20349.0], [592.0, 20413.0], [590.0, 21044.5], [584.0, 20386.0], [636.0, 20287.0], [639.0, 20227.5], [634.0, 20356.0], [632.0, 21122.0], [633.0, 21140.0], [628.0, 20377.0], [629.0, 20311.0], [631.0, 20375.0], [626.0, 20909.0], [618.0, 21251.0], [620.0, 20393.0], [624.0, 20849.5], [613.0, 20465.0], [611.0, 20411.0], [608.0, 20970.0], [668.0, 20647.0], [671.0, 20754.0], [666.0, 20881.0], [647.0, 20811.5], [644.0, 20392.0], [642.0, 21208.0], [662.0, 21296.0], [660.0, 20696.0], [659.0, 20367.0], [655.0, 21051.0], [653.0, 20364.0], [649.0, 20258.0], [690.0, 21230.0], [702.0, 20614.0], [700.0, 20343.0], [699.0, 21007.0], [697.0, 20432.0], [686.0, 21066.0], [672.0, 20609.0], [675.0, 21064.5], [674.0, 20374.0], [679.0, 21201.0], [677.0, 20730.0], [684.0, 20751.0], [683.0, 20321.0], [681.0, 20794.0], [695.0, 20266.0], [693.0, 21008.0], [692.0, 21037.0], [688.0, 20665.0], [729.0, 20760.0], [734.0, 19849.0], [735.0, 20112.5], [721.0, 20634.0], [720.0, 20743.0], [723.0, 20381.0], [722.0, 20605.0], [733.0, 19951.0], [732.0, 19980.0], [731.0, 19836.0], [728.0, 20408.0], [711.0, 20133.0], [710.0, 21184.0], [709.0, 21060.0], [708.0, 20983.0], [707.0, 20245.0], [706.0, 21124.0], [705.0, 20729.0], [719.0, 21050.0], [718.0, 20802.0], [717.0, 21030.0], [716.0, 21217.0], [715.0, 20155.0], [714.0, 20381.0], [713.0, 21182.0], [712.0, 20926.0], [727.0, 20528.0], [726.0, 20312.5], [765.0, 20683.0], [766.0, 20395.0], [752.0, 20716.0], [755.0, 19750.0], [753.0, 20619.5], [757.0, 20321.5], [756.0, 20371.0], [764.0, 19671.0], [763.0, 20421.0], [762.0, 19886.0], [761.0, 20462.0], [760.0, 20548.0], [742.0, 20406.0], [741.0, 19843.0], [740.0, 20801.0], [739.0, 20705.0], [738.0, 20172.0], [737.0, 20041.5], [750.0, 20579.5], [748.0, 20361.0], [747.0, 20372.0], [744.0, 20404.0], [759.0, 20852.0], [758.0, 19822.0], [797.0, 20127.5], [799.0, 20045.5], [795.0, 20059.5], [793.0, 20091.0], [792.0, 20025.0], [773.0, 20438.0], [770.0, 20867.0], [769.0, 20245.666666666668], [768.0, 20356.0], [783.0, 20081.821428571428], [782.0, 20282.785714285714], [781.0, 20193.475409836065], [780.0, 19749.0], [791.0, 20618.5], [789.0, 20061.25], [787.0, 19660.666666666668], [785.0, 20037.0], [824.0, 20060.666666666668], [828.0, 20190.0], [831.0, 19800.0], [819.0, 20429.5], [817.0, 19652.5], [830.0, 20745.0], [829.0, 20546.0], [827.0, 19655.0], [826.0, 19724.0], [825.0, 20648.0], [815.0, 20106.5], [800.0, 19788.0], [802.0, 19963.0], [801.0, 20795.0], [804.0, 20009.5], [803.0, 19556.0], [806.0, 20287.5], [805.0, 19790.0], [813.0, 20046.0], [812.0, 20313.0], [811.0, 20408.5], [810.0, 20628.5], [808.0, 20109.0], [822.0, 20302.0], [821.0, 20247.5], [860.0, 19740.0], [863.0, 20406.0], [849.0, 20435.0], [848.0, 20394.0], [851.0, 20386.0], [850.0, 20336.0], [853.0, 20568.0], [852.0, 19634.0], [862.0, 20552.0], [861.0, 19418.0], [859.0, 20140.0], [858.0, 20282.0], [857.0, 20518.0], [856.0, 20379.0], [847.0, 19746.0], [833.0, 20215.0], [832.0, 20458.0], [835.0, 20595.0], [834.0, 20536.0], [837.0, 19627.0], [836.0, 19751.0], [839.0, 20555.0], [838.0, 20112.5], [846.0, 19942.0], [845.0, 20536.0], [844.0, 20172.0], [843.0, 19794.0], [842.0, 20671.0], [841.0, 19709.0], [840.0, 20374.0], [855.0, 20605.0], [854.0, 19438.0], [879.0, 20137.0], [894.0, 19235.0], [868.0, 20282.0], [867.0, 20342.0], [866.0, 20353.0], [865.0, 19914.5], [864.0, 19587.0], [881.0, 20220.0], [880.0, 19459.0], [878.0, 19417.0], [876.0, 19687.5], [875.0, 20233.0], [874.0, 19895.5], [873.0, 20064.0], [911.0, 20362.0], [899.0, 19398.0], [896.0, 19422.0], [958.0, 20027.0], [949.0, 19263.0], [944.0, 19976.0], [943.0, 19297.0], [942.0, 19208.5], [940.0, 19882.714285714283], [939.0, 19921.2], [988.0, 19799.0], [991.0, 19941.0], [976.0, 20184.0], [978.0, 19967.0], [977.0, 19923.5], [981.0, 19819.5], [980.0, 18881.0], [990.0, 19709.0], [989.0, 19126.0], [987.0, 19708.0], [986.0, 19544.0], [985.0, 19891.0], [984.0, 19876.0], [975.0, 19877.0], [960.0, 19351.0], [962.0, 19486.5], [961.0, 19699.575757575763], [964.0, 19888.0], [963.0, 20112.0], [967.0, 19627.0], [965.0, 19167.0], [974.0, 19906.0], [973.0, 19645.5], [972.0, 19101.0], [970.0, 20065.5], [969.0, 19966.666666666668], [968.0, 19100.0], [983.0, 19714.0], [982.0, 19178.0], [1000.0, 19604.14285714286], [997.0, 19122.0], [996.0, 19267.5], [994.0, 19816.0], [993.0, 19362.0], [992.0, 19656.0]], "isOverall": false, "label": "Home Page", "isController": false}, {"data": [[631.4269999999997, 20628.906999999985]], "isOverall": false, "label": "Home Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8916.666666666666, "minX": 1.60710552E12, "maxY": 9315.0, "series": [{"data": [[1.60710552E12, 8916.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60710552E12, 9315.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60710552E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20628.906999999985, "minX": 1.60710552E12, "maxY": 20628.906999999985, "series": [{"data": [[1.60710552E12, 20628.906999999985]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60710552E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20628.73700000003, "minX": 1.60710552E12, "maxY": 20628.73700000003, "series": [{"data": [[1.60710552E12, 20628.73700000003]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60710552E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 20423.020000000004, "minX": 1.60710552E12, "maxY": 20423.020000000004, "series": [{"data": [[1.60710552E12, 20423.020000000004]], "isOverall": false, "label": "Home Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60710552E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18881.0, "minX": 1.60710552E12, "maxY": 21780.0, "series": [{"data": [[1.60710552E12, 21780.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60710552E12, 19100.008999761343]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60710552E12, 19100.909900095463]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60710552E12, 19100.50949988067]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60710552E12, 18881.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60710552E12, 20619.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60710552E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19743.0, "minX": 66.0, "maxY": 21100.0, "series": [{"data": [[66.0, 19743.0], [605.0, 21100.0], [329.0, 20190.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 605.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19743.0, "minX": 66.0, "maxY": 21100.0, "series": [{"data": [[66.0, 19743.0], [605.0, 21100.0], [329.0, 20190.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 605.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.60710552E12, "maxY": 16.666666666666668, "series": [{"data": [[1.60710552E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60710552E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.60710552E12, "maxY": 16.666666666666668, "series": [{"data": [[1.60710552E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60710552E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.60710552E12, "maxY": 16.666666666666668, "series": [{"data": [[1.60710552E12, 16.666666666666668]], "isOverall": false, "label": "Home Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60710552E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.60710552E12, "maxY": 16.666666666666668, "series": [{"data": [[1.60710552E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60710552E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

